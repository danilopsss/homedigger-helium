"""empty message

Revision ID: 610965e104b5
Revises:
Create Date: 2023-12-20 23:08:12.624529

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "610965e104b5"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_username"), "user", ["username"], unique=True
    )
    op.create_table(
        "user_access_history",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "event",
            sa.Enum("TOKEN_GENERATED", "TOKEN_REFRESHED", name="events"),
            nullable=False,
        ),
        sa.Column("ip", sa.DateTime(), nullable=False),
        sa.Column("user_agent", sa.String(length=100), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], ondelete="NO ACTION"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_access_history_event"),
        "user_access_history",
        ["event"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_access_history_user_agent"),
        "user_access_history",
        ["user_agent"],
        unique=True,
    )
    op.create_table(
        "user_details",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("birthday", sa.DateTime(), nullable=False),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], ondelete="NO ACTION"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_details_email"), "user_details", ["email"], unique=True
    )
    op.create_index(
        op.f("ix_user_details_name"), "user_details", ["name"], unique=False
    )
    op.create_table(
        "user_secrets",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("secret", sa.String(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], ondelete="NO ACTION"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    raise NotImplementedError("Downgrade is not supported.")
